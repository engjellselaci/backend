{"version":3,"sources":["Components/Note.js","Services/notes.js","Components/Notification.js","Components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","notesToShow","filter","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"mNAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBAChBC,EAAQF,EAAKG,UACjB,qBACC,iBACH,OACI,wBAAIC,UAAU,QACTJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCW7B,EAjBD,WAEV,OADgBK,IAAMC,IAHV,cAIGC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAe9B,EAZA,SAAAC,GAEX,OADgBL,IAAMM,KARV,aAQwBD,GACrBH,MAAK,SAAAC,GAChB,OAAOA,EAASC,SAST,EANA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAdJ,aAcI,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAChB,OAAOA,EAASC,SCFTK,G,MAbM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAgB,OAAZA,EACO,KAGP,oCACA,yBAAKb,UAAU,SACVa,MCOEC,EAdA,WAMX,OACI,yBAAKC,MANW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAIV,6BACA,uGCwEOC,EA7EH,SAACC,GAAW,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,OAEWF,mBAAS,IAFpB,mBAEZG,EAFY,KAEHC,EAFG,OAGWJ,oBAAS,GAHpB,mBAGZK,EAHY,KAGHC,EAHG,OAIqBN,mBAAS,MAJ9B,mBAIZO,EAJY,KAIEC,EAJF,KAMnBC,qBAAU,WACNC,IAEK1B,MAAK,SAAA2B,GACFC,QAAQC,IAAI,qBACZX,EAASS,QAElB,IACH,IAkCMG,EAAcT,EAClBJ,EACAA,EAAMc,QAAO,SAAAxC,GAAI,OAAEA,EAAKG,aAE1B,OACI,6BACI,qCACA,kBAAC,EAAD,CAAcc,QAASe,IACvB,6BACI,4BAAQ1B,QAAS,kBAAMyB,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BACKS,EAAYE,KAAI,SAAAzC,GAAI,OACjB,kBAAC,EAAD,CAAM0C,IAAK1C,EAAKc,GAAId,KAAMA,EAAMC,iBAAkB,kBAjCvC,SAACa,GACxB,IAAMd,EAAO0B,EAAMiB,MAAK,SAAAC,GAAC,OAAIA,EAAE9B,KAAOA,KAChC+B,EAAW,eAAO7C,EAAP,CAAaG,WAAYH,EAAKG,YAE/CgC,EACQrB,EAAI+B,GACXpC,MAAK,SAAAqC,GACFnB,EAASD,EAAMe,KAAI,SAAAzC,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAO8C,SAEtDC,OAAM,SAAAC,GACHf,EAAgB,SAAD,OACFjC,EAAKK,QADH,sCAGf4C,YAAW,WACPhB,EAAgB,QACjB,QAkB4DiB,CAAmBlD,EAAKc,WAGvF,0BAAMqC,SApDE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACfjD,QAASuB,EACT2B,MAAM,IAAIC,MAAOC,cACjBtD,UAAWuD,KAAKC,SAAW,GAC3B7C,GAAIY,EAAMkC,OAAS,GAEvBzB,EACQmB,GACP7C,MAAK,SAAAqC,GACFT,QAAQC,IAAIQ,GACZnB,EAASD,EAAMmC,OAAOf,IACtBjB,EAAW,SAwCP,2BACIiC,MAAOlC,EACPmC,SAlBS,SAAAX,GAAK,OAAIvB,EAAWuB,EAAMY,OAAOF,UAmB9C,4BAAQG,KAAK,UAAb,SAEJ,kBAAC,EAAD,QCzERC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.8fbaed87.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\nconst label = note.important\n? 'make not important'\n : 'make important'\nreturn (\n    <li className='note'>\n        {note.content}\n        <button onClick={toggleImportance}>{label}</button>\n    </li>\n)\n}\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll= () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n    }\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response=> {\n        return response.data })\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response=> {\n        return response.data })\n}\n\nexport default {getAll ,create, update}","import React from 'react'\nimport '../index.css'\nconst Notification = ({message}) => {\n    if (message === null) {\n        return null\n    }\n    return (\n        <>\n        <div className=\"error\">\n            {message}\n        </div>\n        </>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n    return (\n        <div style ={footerStyle}>\n        <br />\n        <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n        </div>\n    )\n}\n\nexport default Footer","import React, { useState, useEffect } from 'react'\nimport Note from './Components/Note'\nimport noteService from './Services/notes'\nimport './index.css'\nimport Notification from './Components/Notification'\nimport Footer from './Components/Footer'\nconst App = (props) => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n    \n    useEffect(() => {\n        noteService\n           .getAll()\n            .then(initialNotes => {\n                console.log('promise fulfilled')\n                setNotes(initialNotes)\n            })\n    }, [])\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n            id: notes.length + 1,\n        }\n        noteService\n        .create(noteObject)\n        .then(returnedNote => {\n            console.log(returnedNote)\n            setNotes(notes.concat(returnedNote))\n            setNewNote('')\n        })\n    }\n    const toggleImportanceOf = (id) => {\n        const note = notes.find(n => n.id === id)\n        const changedNote = {...note, important: !note.important}\n\n        noteService\n        .update(id, changedNote)\n        .then(returnedNote => {\n            setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n        })\n        .catch(error => {\n            setErrorMessage(\n                `Note '${note.content}' was already removed from server`\n            )\n            setTimeout(() => {\n                setErrorMessage(null)\n            }, 5000)\n        })\n    }\n    const notesToShow = showAll\n    ? notes\n    : notes.filter(note=>note.important)\n    const handleNoteChange = event => setNewNote(event.target.value)\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage} />\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map(note =>\n                    <Note key={note.id} note={note} toggleImportance={()=> toggleImportanceOf(note.id)} />\n                )}\n            </ul>\n            <form onSubmit={addNote}>\n                <input\n                    value={newNote}\n                    onChange={handleNoteChange} />\n                <button type=\"submit\">save</button>\n            </form>\n            <Footer />\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\n\n    ReactDOM.render(\n        <App />,\n        document.getElementById('root')\n    )\n\n\n\n"],"sourceRoot":""}